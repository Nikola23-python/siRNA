class helper:
    """–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è —Ä–∞–±–æ—á–∞—è"""
    def info_about_methods(obj):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Ç–æ–¥–∞—Ö –∫–ª–∞—Å—Å–∞"""
        print("=" * 60)
        print(f"–î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –ö–õ–ê–°–°–ê: {obj.__class__.__name__}")
        print("=" * 60)
        class_doc = obj.__class__.__doc__
        if class_doc:
            print(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞:\n{class_doc.strip()}\n")
        else:
            print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n")
        methods = [method for method in dir(obj)
                   if not method.startswith('_') or
                   (method.startswith('_') and not method.startswith('__'))]
        for method_name in methods:
            try:
                method = getattr(obj, method_name)
                if callable(method):
                    print(f"üîπ –ú–ï–¢–û–î: {method_name}()")
                    doc = method.__doc__
                    if doc:
                        lines = doc.strip().split('\n')
                        for line in lines:
                            print(f"   {line.strip()}")
                    else:
                        print(" üìù –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    print()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ—Ç–æ–¥–∞ {method_name}: {e}")



    """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞, –Ω–æ –ø–æ–∫–∞ –±–µ–∑ –ø–æ–Ω—è—Ç–∏—è –∫–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å(–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)"""
    def run_all_methods(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞"""
        exclude_methods = ['info_about_methods']
        results = []
        methods = [method for method in dir(self)
                   if not method.startswith('_') and
                   callable(getattr(self, method)) and
                   method != 'run_all_methods' and
                   method not in exclude_methods]

        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤: {len(methods)}")

        for method_name in methods:
            try:
                method = getattr(self, method_name)
                print(f"‚ñ∂Ô∏è  –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {method_name}()")
                result = method()
                results.append({
                    'method': method_name,
                    'result': result,
                    'doc': method.__doc__.strip() if method.__doc__ else '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'
                })
                print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

            except Exception as e:
                results.append({
                    'method': method_name,
                    'result': f"–û—à–∏–±–∫–∞: {e}",
                    'doc': '–ú–µ—Ç–æ–¥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π'
                })
                print(f" ‚ùå –û—à–∏–±–∫–∞: {e}")
        return results

    def to_csv(self, filename=None):
        if filename:
            self.to_csv(filename, index=False)
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        return self