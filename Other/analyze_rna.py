# from datetime import datetime
# import pandas as pd
# from Bio import SeqIO
# sequence1 = SeqIO.read("sequence.fasta", "fasta")
# ATXN1 = str(sequence1.seq)
#
#
# class editor_rna:
#     """–ú–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ RNA"""
#     def __init__(self):
#         self.sequence = ATXN1
#         self.length = len(self.sequence)
#         self._fragments = []
#         self._gc_content = []
#
#     def info_rna(self):
#         """–ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –†–ù–ö"""
#         print(self.sequence)
#
#     def slice_rna(self, start_size=15, end_size=30, filename=None):
#         # start = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å: "))
#         # end = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å: "))
#         # frag = self.sequence[start:end]
#         frag = self.sequence[781:2858]
#         # start_size = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: "))
#         # end_size = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ")) + 1
#         start_size = 15
#         end_size = 30 + 1
#
#         self._fragments = []
#
#         print("üî™ –ù–∞—Ä–µ–∑–∫–∞ –†–ù–ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
#
#         for fragment_size in range(start_size, end_size):
#             for start_pos in range(0, len(frag), fragment_size):
#                 end_pos = start_pos + fragment_size
#                 if end_pos > len(frag):
#                     break
#                 fragment = frag[start_pos:start_pos + fragment_size]
#                 self._fragments.append(
#                     # 'fragment_id': f"{fragment_size}_{start_pos + 1}",
#                     # 'size_nt': fragment_size,
#                     fragment
#                     # 'sequence_length': len(frag)
#                 )
#         fragments = str(self._fragments)
#         return fragments
#
# b = editor_rna()
# print(b.slice_rna())
#
# class analyz_rna:
#     """–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ RNA"""
#
#     def __init__(self):
#         self.parts = None
#         self._gc_content = None
#
#     #     self.editor_rna = editor_rna()  # üîπ –°–æ–∑–¥–∞–µ–º –¥—Ä—É–≥–æ–π –∫–ª–∞—Å—Å
#     #
#     #     # üîπ –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ò–ó –î–†–£–ì–û–ì–û –ö–õ–ê–°–°–ê
#     #     self.parts = []  # –°—é–¥–∞ —Å–∫–æ–ø–∏—Ä—É–µ–º fragments_list
#     #
#     # def import_fragments(self):
#     #     """–ö–æ–ø–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
#     #     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –≤ –¥—Ä—É–≥–æ–º –∫–ª–∞—Å—Å–µ
#     #     self.editor_rna.slice_rna(self.sequence)
#     #     # üîπ –ö–û–ü–ò–†–£–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–£–Æ –ò–ó –î–†–£–ì–û–ì–û –ö–õ–ê–°–°–ê
#     #     self.parts = self.editor_rna._fragments# üîπ –ü—Ä—è–º–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
#     #
#     #     print(f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {len(self.parts)}")
#     #     return self.parts
#
#     def analyze_gc(self, start_size=15, end_size=30, filename=None):
#         """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç GC-content –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame"""
#         self.parts = editor_rna.slice_rna()
#         self._gc_content = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
#         for i, item in enumerate(self.parts):
#             # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
#             if isinstance(item, tuple):
#                 # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
#                 fragment = item[0]
#             elif isinstance(item, str):
#                 # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
#                 fragment = item
#             else:
#                 # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
#                 fragment = str(item)
#
#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ fragment - —Å—Ç—Ä–æ–∫–∞
#             if not isinstance(fragment, str):
#                 fragment = str(fragment)
#             length = len(fragment)
#             gc_count = fragment.upper().count('G') + fragment.upper().count('C')
#             total_length = length
#             if total_length > 0:
#                 gc_percent = (gc_count / total_length) * 100
#             else:
#                 gc_percent = 0.0
#             at_count = length - gc_count
#
#             # –î–û–ë–ê–í–õ–Ø–ï–ú –≤ —Å–ø–∏—Å–æ–∫, –∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
#             self._gc_content.append({
#                 'sequence_id': f'seq_{1:03d}',
#                 'sequence_preview': fragment,
#                 'length': length,
#                 'gc_count': gc_count,
#                 'at_count': at_count,
#                 'gc_percent': gc_percent,
#                 'gc_category': 'Low' if gc_percent < 36 else 'High' if gc_percent > 52 else 'Optimal'
#             })
#         return pd.DataFrame(self._gc_content)
#
#             # df = pd.DataFrame(results)
#             # if filename is None:
#             #     timestamp = datetime.now().strftime("%Y%m%d_%H%M")
#             #     filename = f"rna_fragments_{timestamp}.csv"
#             # df.to_csv(filename, index=False, encoding='utf-8')
#             # print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
#             # print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
#             # print(f"   - –í—Å–µ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: {len(df)}")
#             # print(f"   - –î–∏–∞–ø–∞–∑–æ–Ω —Ä–∞–∑–º–µ—Ä–æ–≤: {start_size}-{end_size} –Ω—Ç")
#         # return pd.DataFrame(self._gc_content)
#
#
#
#     # # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
#     #
#     #
#     # # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Å–∏–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
#     # print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ GC-content:")
#     # print(df[['sequence_id', 'length', 'gc_percent', 'gc_category']].to_string(index=False))
#     #
#     # # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
#     # print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
#     # print(f"–°—Ä–µ–¥–Ω–∏–π GC-content: {df['gc_percent'].mean():.1f}%")
#     # print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π GC-content: {df['gc_percent'].min():.1f}%")
#     # print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π GC-content: {df['gc_percent'].max():.1f}%")
#     #
#     # with pd.ExcelWriter('gc_analys.xlsx') as writer:
#     #     # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
#     #     df.to_excel(writer, sheet_name='Sequences', index=False)
#     #
#     #     # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
#     #     df.to_excel(writer, sheet_name='Statistics', index=False)
#     #
#     # print("–§–∞–π–ª 'gc_analys.xlsx' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")


